openapi: 3.0.0
info:
  title: HHPlus 상품/주문 API
  version: 1.0.0
  description: 상품 조회, 장바구니, 주문/결제, 쿠폰 관련 API 명세서 (DTO 제거, Mock 테스트용)

paths:
  # ========================================
  # 1. 상품 관리
  # ========================================
  /api/products:
    get:
      summary: 상품 목록 조회
      parameters:
        - name: page
          in: query
          schema:
            type: integer
            default: 0
        - name: size
          in: query
          schema:
            type: integer
            default: 20
      responses:
        '200':
          description: 성공
          content:
            application/json:
              example:
                content:
                  - productId: 1
                    productName: "상품1"
                    basePrice: 10000
                    status: "ACTIVE"
                  - productId: 2
                    productName: "상품2"
                    basePrice: 20000
                    status: "ACTIVE"

  /api/products/{productId}:
    get:
      summary: 상품 상세 조회
      parameters:
        - name: productId
          in: path
          required: true
          schema:
            type: integer
      responses:
        '200':
          description: 성공
          content:
            application/json:
              example:
                productId: 1
                productName: "상품1"
                basePrice: 10000
                options:
                  - optionId: 1
                    optionName: "빨강-L"
                    additionalPrice: 0
                    availableStock: 10

  /api/products/popular:
    get:
      summary: 인기 상품 Top 5
      parameters:
        - name: days
          in: query
          schema:
            type: integer
            default: 3
        - name: limit
          in: query
          schema:
            type: integer
            default: 5
      responses:
        '200':
          description: 성공
          content:
            application/json:
              example:
                period: "2025-10-29"
                products:
                  - rank: 1
                    productId: 1
                    productName: "상품1"
                    salesCount: 50
                    totalRevenue: 500000

  # ========================================
  # 2. 장바구니
  # ========================================
  /api/carts:
    post:
      summary: 장바구니 담기
      requestBody:
        required: true
        content:
          application/json:
            example:
              memberId: 1
              optionId: 1
              quantity: 2
      responses:
        '200':
          description: 성공
          content:
            application/json:
              example:
                cartId: 1
                totalItems: 2
    get:
      summary: 장바구니 조회
      parameters:
        - name: memberId
          in: query
          required: true
          schema:
            type: integer
      responses:
        '200':
          description: 성공
          content:
            application/json:
              example:
                items:
                  - cartId: 1
                    productName: "상품1"
                    optionName: "빨강-L"
                    quantity: 2
                    unitPrice: 10000
                    totalPrice: 20000
                totalAmount: 20000

  /api/carts/{cartId}:
    delete:
      summary: 장바구니 삭제
      parameters:
        - name: cartId
          in: path
          required: true
          schema:
            type: integer
      responses:
        '204':
          description: 삭제 성공

  # ========================================
  # 3. 주문/결제
  # ========================================
  /api/orders:
    post:
      summary: 주문 생성
      requestBody:
        required: true
        content:
          application/json:
            example:
              memberId: 1
              cartIds: [1,2]
              memberCouponId: null
      responses:
        '200':
          description: 성공
          content:
            application/json:
              example:
                orderId: 1
                orderNumber: "ORD-20251029-0001"
                status: "PENDING"
                finalAmount: 20000

  /api/orders/{orderId}/pay:
    post:
      summary: 잔액 결제
      parameters:
        - name: orderId
          in: path
          required: true
          schema:
            type: integer
      requestBody:
        required: true
        content:
          application/json:
            example:
              memberId: 1
      responses:
        '200':
          description: 결제 성공
          content:
            application/json:
              example:
                orderId: 1
                status: "CONFIRMED"
                paidAmount: 20000
                remainingBalance: 80000

  # ========================================
  # 4. 쿠폰
  # ========================================
  /api/coupons/{couponId}/issue:
    post:
      summary: 쿠폰 발급 (선착순)
      parameters:
        - name: couponId
          in: path
          required: true
          schema:
            type: integer
      requestBody:
        required: true
        content:
          application/json:
            example:
              memberId: 1
      responses:
        '200':
          description: 발급 성공
          content:
            application/json:
              example:
                memberCouponId: 1
                couponName: "10% 할인쿠폰"
                discountValue: 1000
                expiredAt: "2025-11-30T23:59:59"

  /api/coupons/my:
    get:
      summary: 내 쿠폰 목록 조회
      parameters:
        - name: memberId
          in: query
          required: true
          schema:
            type: integer
        - name: status
          in: query
          schema:
            type: string
            enum: [UNUSED, USED, EXPIRED]
      responses:
        '200':
          description: 성공
          content:
            application/json:
              example:
                coupons:
                  - memberCouponId: 1
                    couponName: "10% 할인쿠폰"
                    discountType: "RATE"
                    discountValue: 1000
                    status: "UNUSED"
                    expiredAt: "2025-11-30T23:59:59"