openapi: 3.0.0
info:
  title: HHPlus 상품/주문 API
  version: 1.0.0
  description: |
    상품 조회, 장바구니, 주문/결제, 쿠폰 관련 API 명세서

paths:
  # ========================================
  # 1. 상품 관리
  # ========================================

  /api/products:
    get:
      summary: 상품 목록 조회
      parameters:
        - name: page
          in: query
          schema:
            type: integer
            default: 0
        - name: size
          in: query
          schema:
            type: integer
            default: 20
      responses:
        '200':
          description: 성공
          content:
            application/json:
              schema:
                type: object
                properties:
                  content:
                    type: array
                    items:
                      type: object
                      properties:
                        productId:
                          type: integer
                        productName:
                          type: string
                        basePrice:
                          type: integer
                        status:
                          type: string

  /api/products/{productId}:
    get:
      summary: 상품 상세 조회 (가격, 재고 포함)
      parameters:
        - name: productId
          in: path
          required: true
          schema:
            type: integer
      responses:
        '200':
          description: 성공
          content:
            application/json:
              schema:
                type: object
                properties:
                  productId: { type: integer }
                  productName: { type: string }
                  basePrice: { type: integer }
                  options:
                    type: array
                    items:
                      type: object
                      properties:
                        optionId: { type: integer }
                        optionName: { type: string }
                        additionalPrice: { type: integer }
                        availableStock: { type: integer }

  /api/products/popular:
    get:
      summary: 인기 상품 Top 5 (최근 3일)
      parameters:
        - name: days
          in: query
          schema:
            type: integer
            default: 3
        - name: limit
          in: query
          schema:
            type: integer
            default: 5
      responses:
        '200':
          description: 성공
          content:
            application/json:
              schema:
                type: object
                properties:
                  period: { type: string }
                  products:
                    type: array
                    items:
                      type: object
                      properties:
                        rank: { type: integer }
                        productId: { type: integer }
                        productName: { type: string }
                        salesCount: { type: integer }
                        totalRevenue: { type: integer }

  # ========================================
  # 2. 장바구니
  # ========================================

  /api/carts:
    post:
      summary: 장바구니 담기
      requestBody:
        required: true
        content:
          application/json:
            schema:
              type: object
              properties:
                memberId: { type: integer }
                optionId: { type: integer }
                quantity: { type: integer }
      responses:
        '200':
          description: 성공
          content:
            application/json:
              schema:
                type: object
                properties:
                  cartId: { type: integer }
                  totalItems: { type: integer }

    get:
      summary: 장바구니 조회
      parameters:
        - name: memberId
          in: query
          required: true
          schema:
            type: integer
      responses:
        '200':
          description: 성공
          content:
            application/json:
              schema:
                type: object
                properties:
                  items:
                    type: array
                    items:
                      type: object
                      properties:
                        cartId: { type: integer }
                        productName: { type: string }
                        optionName: { type: string }
                        quantity: { type: integer }
                        unitPrice: { type: integer }
                        totalPrice: { type: integer }
                  totalAmount: { type: integer }

  /api/carts/{cartId}:
    delete:
      summary: 장바구니 삭제
      parameters:
        - name: cartId
          in: path
          required: true
          schema:
            type: integer
      responses:
        '204':
          description: 삭제 성공

  # ========================================
  # 3. 주문/결제
  # ========================================

  /api/orders:
    post:
      summary: 주문 생성 (재고 차감)
      requestBody:
        required: true
        content:
          application/json:
            schema:
              type: object
              properties:
                memberId: { type: integer }
                cartIds:
                  type: array
                  items:
                    type: integer
                memberCouponId:
                  type: integer
                  nullable: true
      responses:
        '200':
          description: 성공
          content:
            application/json:
              schema:
                type: object
                properties:
                  orderId: { type: integer }
                  orderNumber: { type: string }
                  status: { type: string }
                  finalAmount: { type: integer }

  /api/orders/{orderId}/pay:
    post:
      summary: 잔액 결제
      parameters:
        - name: orderId
          in: path
          required: true
          schema:
            type: integer
      requestBody:
        required: true
        content:
          application/json:
            schema:
              type: object
              properties:
                memberId: { type: integer }
      responses:
        '200':
          description: 결제 성공
          content:
            application/json:
              schema:
                type: object
                properties:
                  orderId: { type: integer }
                  status: { type: string }
                  paidAmount: { type: integer }
                  remainingBalance: { type: integer }

  # ========================================
  # 4. 쿠폰
  # ========================================

  /api/coupons/{couponId}/issue:
    post:
      summary: 쿠폰 발급 (선착순)
      parameters:
        - name: couponId
          in: path
          required: true
          schema:
            type: integer
      requestBody:
        required: true
        content:
          application/json:
            schema:
              type: object
              properties:
                memberId: { type: integer }
      responses:
        '200':
          description: 발급 성공
          content:
            application/json:
              schema:
                type: object
                properties:
                  memberCouponId: { type: integer }
                  couponName: { type: string }
                  discountValue: { type: integer }
                  expiredAt: { type: string, format: date-time }

  /api/coupons/my:
    get:
      summary: 내 쿠폰 목록 조회
      parameters:
        - name: memberId
          in: query
          required: true
          schema:
            type: integer
        - name: status
          in: query
          schema:
            type: string
            enum: [UNUSED, USED, EXPIRED]
      responses:
        '200':
          description: 성공
          content:
            application/json:
              schema:
                type: object
                properties:
                  coupons:
                    type: array
                    items:
                      type: object
                      properties:
                        memberCouponId: { type: integer }
                        couponName: { type: string }
                        discountType: { type: string }
                        discountValue: { type: integer }
                        status: { type: string }
                        expiredAt: { type: string, format: date-time }